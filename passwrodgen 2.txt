import re
import secrets
import string


def generate_password(length, nums, special_chars, uppercase, lowercase):
    # Define the possible characters for the password
    letters = string.ascii_letters
    digits = string.digits
    symbols = string.punctuation

    # Combine all characters
    all_characters = letters + digits + symbols

    while True:
        password = ''
        # Generate password
        for _ in range(length):
            password += secrets.choice(all_characters)
        
        constraints = [
            (nums, '[0-9]'),
            (lowercase, '[a-z]'),
            (uppercase, '[A-Z]'),
            (special_chars, '')
        ]        

    return password
    
# new_password = generate_password(8)
# print(new_password)
pattern = '[^a-z]t'
quote = 'Not all those who wander are lost.'
print(re.findall(pattern, quote))

/////////////////////////////////////////////////////
pattern = '.+'
quote = 'Not all those who wander are lost.'
print(re.findall(pattern, quote))
/////////////////////////////////////////////////////
pattern = '\.'
quote = 'Not all those who wander are lost.'
print(re.findall(pattern, quote))
/////////////////////////////////////////////////////
pattern = r'\.'
quote = 'Not all those who wander are lost.'
print(re.findall(pattern, quote))
//////////////////////////////////////////////////////
 constraints = [
            (nums, r'\d'),
            (lowercase, r'[a-z]'),
            (uppercase, r'[A-Z]'),
            (special_chars, r'[^a-zA-Z0-9]')//47
        ] 
////////////////////////////////////////////////////
pattern = r'\W'
quote = '_'
print(re.findall(pattern, quote))   
//////////////////////////////////////////////////
constraints = [
            (nums, r'\d'),
            (lowercase, r'[a-z]'),
            (uppercase, r'[A-Z]'), 
	    (special_chars, fr'[{symbols}]')
        
        ] 
//////////////////////////////////////////////////
import re
import secrets
import string


def generate_password(length, nums, special_chars, uppercase, lowercase):
    # Define the possible characters for the password
    letters = string.ascii_letters
    digits = string.digits
    symbols = string.punctuation

    # Combine all characters
    all_characters = letters + digits + symbols

    while True:
        password = ''
        # Generate password
        for _ in range(length):
            password += secrets.choice(all_characters)
       
        constraints = [
            (nums, r'\d'),
            (lowercase, r'[a-z]'),
            (uppercase, r'[A-Z]'),            
            (special_chars, fr'[{symbols}]')            
        ]

        # Check constraints
        count = 0
        for constraint, pattern in constraints:
            if constraint <= len(re.findall(pattern, password)):
                count += 1
            
        if count == 4:
            break

    return password

# new_password = generate_password(8)
# print(new_password)
//////////////////////////////////////////////////
